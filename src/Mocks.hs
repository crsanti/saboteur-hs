module Mocks where

import System.Random
-- import Control.Monad.State

-- import State
-- import Card
-- import Player
-- import Game
-- import Board

newGen :: StdGen
newGen = mkStdGen 0

-- mockPlayers :: [Player]
-- mockPlayers =
--   let p1 = initPlayer Miner "p1"
--       p2 = initPlayer Miner "p2"
--       p3 = initPlayer Miner "p3"
--   in  [p1, p2, p3]

-- mockGame = execState ((addPlayers mockPlayers) >> startGame) (newGame $ mkStdGen 0)
-- mockGame = initGame  execState ((addPlayers mockPlayers) >> startGame) (newGame $ mkStdGen 0)

-- finishedBoard :: Board
-- finishedBoard = map (\(x,y,c) -> (x,y, stringToCard c)) [
--   ((-1),7,"X1010"),
--   ((-2),7,"X1100"), ((-1),7,"C1101"), (0,7,"C1111"), (1,7,"C0101"), (2,7,"X1111"),
--   ((-2),6,"C0110"), ((-1),6,"C0101"), (0,6,"C1111"), (1,6,"X0001"), (2,6,"C1010"),
--   ((-2),5,"C1100"), ((-1),5,"C0111"), (0,5,"C1111"), (1,5,"C0101"), (2,5,"C1011"),
--   ((-2),4,"C0110"), ((-1),4,"C1111"), (0,4,"C1001"), (1,4,"C0110"), (2,4,"C1011"),
--   ((-2),3,"C1010"), ((-1),3,"C1100"), (0,3,"X0111"), (1,3,"C1111"), (2,3,"X1011"),
--   ((-2),2,"C1110"), ((-1),2,"C0101"), (0,2,"C1101"), (1,2,"C1101"), (2,2,"C1011"),
--   ((-2),1,"C1110"), ((-1),1,"C0011"), (0,1,"C0110"), (1,1,"C0011"), (2,1,"C1010"),
--   ((-2),0,"X1000"), ((-1),0,"C1100"), (1,0,"C1101"), (2,0,"C1001"),
--   (0,0,"S1111"),    ((-2),7,"R1100"), (2,7,"R1100"), (0,7,"G1111")
--   ]

-- listToBoard :: [(Int, Int, String)] -> Board
-- listToBoard = map (\(x,y,c) -> (x,y, stringToCard c))

-- finishedBoard :: Board
-- finishedBoard = listToBoard [
--   ((-2),8,"R11000"),    (0,8,"R11000"),                 (2,8,"G11110"),
--                         (0,7,"C01100"), (1,7,"C01010"), (2,7,"C01101"),
--                         (0,6,"C10100"),
--                         (0,5,"C10100"),
--                         (0,4,"C10100"),
--                         (0,3,"C10100"),
--                         (0,2,"C10100"),
--                         (0,1,"C10100"),
--                         (0,0,"S11110")
--   ]

-- complexFinishedBoard :: Board
-- complexFinishedBoard = listToBoard [
--   ((-2), 8, "R11000"), ((-1), 8, "X10100"), (0, 8, "G11110"),                   (2, 8, "R11110"),
--   ((-2), 7, "X11000"), ((-1), 7, "C11010"), (0, 7, "C11110"), (1, 7, "C01010"), (2, 7, "X11110"),
--   ((-2), 6, "C10011"), ((-1), 6, "C01010"), (0, 6, "C11110"), (1, 6, "X01000"), (2, 6, "C10100"),
--   ((-2), 5, "C11000"), ((-1), 5, "C11011"), (0, 5, "C11110"), (1, 5, "C01010"), (2, 5, "C11101"),
--   ((-2), 4, "C10011"), ((-1), 4, "C11110"), (0, 4, "C10010"), (1, 4, "C10011"), (2, 4, "C11101"),
--   ((-2), 3, "C10100"), ((-1), 3, "C11000"), (0, 3, "X11011"), (1, 3, "C11110"), (2, 3, "X11101"),
--   ((-2), 2, "C11100"), ((-1), 2, "C01010"), (0, 2, "C11010"), (1, 2, "C11010"), (2, 2, "C11101"),
--   ((-2), 1, "C11100"), ((-1), 1, "C11001"), (0, 1, "C10011"), (1, 1, "C11001"), (2, 1, "C10100"),
--   ((-2), 0, "X10000"), ((-1), 0, "C11000"), (0, 0, "S11110"), (1, 0, "C11010"), (2, 0, "C10010")
--   ]
